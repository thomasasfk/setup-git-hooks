#!/bin/bash
set -e

if [[ "$AI" != "1" ]]; then
    exit 0
fi

if ! command -v jq &> /dev/null; then
    echo "Error: jq is required but not installed"
    exit 1
fi

status_output=$(git status --porcelain)
diff_output=$(git diff --cached)

if [ -z "$diff_output" ] && [ -z "$status_output" ]; then
    echo "No staged changes found."
    exit 1
fi

prompt="Generate a single git commit message for these changes following Conventional Commits:
- First line must be: <type>(<scope/jira-id>): <short description> (max 72 chars)
- Types: feat, fix, docs, style, refactor, test, chore, ci, build, perf
- Keep file lengths short, use a new line if we get to 100 characters
- Use dashes instead of stars if using bullet points
- Add body only if needed to explain complex changes
- Try and explain everything that has changed, but short
- Use bullet points for multiple changes
- Keep it concise unless explaining big changes

Status:
${status_output}

Diff:
${diff_output}"

if [ -n "$C" ]; then
    prompt="Context: ${C}

${prompt}"
fi

. ~/.bashrc
shopt -s expand_aliases
if alias gemini 2>/dev/null; then
    echo "Using Gemini CLI tool..."
    if ! response=$(gemini "$prompt" 2>&1); then  # 2>&1 captures both stdout and stderr
        # echo "CLI tool failed with error: $response"
        echo "Gemini failed, falling back to API..."
        CLI_FAILED=1
    fi
else
    echo "Not using Gemini cli tool..."
    CLI_FAILED=1
fi

if [ "${CLI_FAILED}" = "1" ]; then
    GEMINI_API_KEY="${GEMINI_API_KEY:-}"
    if [ -z "$GEMINI_API_KEY" ]; then
        echo "Error: GEMINI_API_KEY environment variable not set"
        exit 1
    fi

    GEMINI_ENDPOINT="https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent"

    json_payload=$(jq -n \
        --arg prompt "$prompt" \
        '{
            contents: [{
                parts: [{
                    text: $prompt
                }]
            }]
        }')

    response=$(curl -s \
        "${GEMINI_ENDPOINT}?key=${GEMINI_API_KEY}" \
        -H "Content-Type: application/json" \
        -X POST \
        -d "$json_payload" | \
        jq -r '.candidates[0].content.parts[0].text // empty')

    if [ -z "$response" ]; then
        echo "Failed to generate commit message."
        exit 1
    fi
fi

echo -e "$response" > "$1"